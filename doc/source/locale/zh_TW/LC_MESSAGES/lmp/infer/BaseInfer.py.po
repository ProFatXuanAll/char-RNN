# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, ProFatXuanAll
# This file is distributed under the same license as the Language Model
# Playground package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Language Model Playground 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-13 16:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/lmp/infer/BaseInfer.py.rst:2
msgid ":py:class:`lmp.infer.BaseInfer`"
msgstr ""

#: lmp.infer._base.BaseInfer:1 of
msgid "Inference method abstract base class."
msgstr ""

#: lmp.infer._base.BaseInfer:3 of
msgid "All inference methods must inherit :py:class:`lmp.infer.BaseInfer`."
msgstr ""

#: lmp.infer._base.BaseInfer:5 of
msgid ""
"For comments throughout this class and its subclasses, we use the "
"following symbols to denote the shape of tensors:"
msgstr ""

#: lmp.infer._base.BaseInfer:8 of
msgid "``B``: Batch size."
msgstr ""

#: lmp.infer._base.BaseInfer:9 of
msgid "``S'``: Length of original sequence of tokens."
msgstr ""

#: lmp.infer._base.BaseInfer:10 of
msgid "``S``: Length of truncated sequence of tokens."
msgstr ""

#: lmp.infer._base.BaseInfer:11 of
msgid "``V``: Vocabulary size."
msgstr ""

#: lmp.infer._base.BaseInfer lmp.infer._base.BaseInfer.gen
#: lmp.infer._base.BaseInfer.infer_parser of
msgid "Parameters"
msgstr ""

#: lmp.infer._base.BaseInfer:13 of
msgid "Useless parameter. Intently left for subclass parameters extension."
msgstr ""

#: lmp.infer._base.BaseInfer:16 of
msgid ""
"Generated sequence of tokens maximum sequence length constraint. Must "
"satisfy ``-1 <= max_seq_len <= BaseInfer.hard_max_seq_len``. If "
"``max_seq_len == -1``, then replace ``max_seq_len`` with "
"``BaseInfer.hard_max_seq_len``. Raise ``ValueError`` if constraint is "
"violated."
msgstr ""

#: lmp.infer._base.BaseInfer:25 of
msgid ""
"Hard limit of maximum sequence length. This is set to avoid generating "
"too many tokens."
msgstr ""

#: lmp.infer._base.BaseInfer of
msgid "type"
msgstr ""

#: lmp.infer._base.BaseInfer:28 of
msgid "ClassVar[int]"
msgstr ""

#: lmp.infer._base.BaseInfer:32 of
msgid ""
"Display name for inference method on CLI. Used for command line argument "
"parsing. Subclass must overwrite ``infer_name`` attribute."
msgstr ""

#: lmp.infer._base.BaseInfer:36 of
msgid "ClassVar[str]"
msgstr ""

#: lmp.infer._base.BaseInfer:40 of
msgid "Maximum sequence length constraint of generated sequence of tokens."
msgstr ""

#: lmp.infer._base.BaseInfer:42 of
msgid "str"
msgstr ""

#: lmp.infer._base.BaseInfer lmp.infer._base.BaseInfer.gen of
msgid "Raises"
msgstr ""

#: lmp.infer._base.BaseInfer:44 of
msgid "If ``max_seq_len`` is not an instance of :py:class:`int`."
msgstr ""

#: lmp.infer._base.BaseInfer:45 of
msgid "If ``max_seq_len`` is not in ``range(-1, BaseInfer.hard_max_seq_len)``."
msgstr ""

#: lmp.infer._base.BaseInfer.gen:1 of
msgid "Generate text conditional on text segment."
msgstr ""

#: lmp.infer._base.BaseInfer.gen:3 of
msgid "Pre-trained language model to generate text."
msgstr ""

#: lmp.infer._base.BaseInfer.gen:5 of
msgid "Pre-trained tokenizer for text segment encoding."
msgstr ""

#: lmp.infer._base.BaseInfer.gen:7 of
msgid "Text segment to condition on."
msgstr ""

#: lmp.infer._base.BaseInfer.gen of
msgid "Returns"
msgstr ""

#: lmp.infer._base.BaseInfer.gen:10 of
msgid "Generated text."
msgstr ""

#: lmp.infer._base.BaseInfer.gen of
msgid "Return type"
msgstr ""

#: lmp.infer._base.BaseInfer.gen:13 of
msgid "When subclass do not implement text generation."
msgstr ""

#: lmp.infer._base.BaseInfer.infer_parser:1 of
msgid "Language model text generation CLI arguments parser."
msgstr ""

#: lmp.infer._base.BaseInfer.infer_parser:3 of
msgid "Parser for CLI arguments."
msgstr ""

#: lmp.infer._base.BaseInfer.infer_parser:8 of
msgid ":obj:`lmp.script.generate_text`"
msgstr ""

#: lmp.infer._base.BaseInfer.infer_parser:9 of
msgid "Generate text using pre-trained language model."
msgstr ""

#: lmp.infer._base.BaseInfer.infer_parser:12 of
msgid "Examples"
msgstr ""

